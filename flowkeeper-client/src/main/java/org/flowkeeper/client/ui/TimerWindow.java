package org.flowkeeper.client.ui;

import java.util.Date;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;

import javax.swing.JOptionPane;

import org.flowkeeper.client.ui.timer.Timer;
import org.flowkeeper.client.ui.timer.TimerAdapter;
import org.flowkeeper.client.ui.timer.TimerState;
import org.flowkeeper.server.InterruptionType;
import org.flowkeeper.server.PomodoroType;
import org.flowkeeper.server.WorkitemType;
import org.flowkeeper.server.api.NoPomodorosLeftException;
import org.flowkeeper.server.api.NotFoundException;
import org.jdesktop.application.Action;

/**
 *
 * @author  Constantine
 */
public class TimerWindow extends javax.swing.JDialog {
    /**
	 * 
	 */
	private static final long serialVersionUID = -2806709143243034448L;
	private WorkitemType workItem;
    private final Preferences prefs = Preferences.userRoot().node("pomodoroServer");
    private final PomodoroClientView mainWindow;

    /** Creates new form InPomodoroWindow */
    public TimerWindow(PomodoroClientView parent, boolean modal, final Timer timer) {
        super(parent.getFrame(), modal);
        this.mainWindow = parent;
        initComponents();

        alwaysOnTopButton.setSelected(prefs.get("timerAlwaysOnTop", "Y").equals("Y"));
        setAlwaysOnTop(alwaysOnTopButton.isSelected());

        timer.addListener(new TimerAdapter() {
            @Override
            public void onTick() {
                String prefix = timer.getState().equals(TimerState.BUSY) ? "Work" : "Rest";
                long t = timer.getTimeLeft() / 1000;
                long m = t / 60;
                long s = t % 60;
                timeLabel.setText(String.format("%s: %02d:%02d", prefix, m, s));
            }

            @Override
            public void onReady() {
                timeLabel.setText("Ready");
                for (PomodoroListener l: listeners) {
                    l.ready(workItem);
                }
                toFront();
            }

            @Override
            public void onWorkCompleted(PomodoroType pomodoro, boolean successfully) {
                boolean restStarted = timer.getState().equals(TimerState.REST);
                enableButtons(!restStarted);
                for (PomodoroListener l: listeners) {
                    l.workCompleted(workItem, successfully);
                }
                toFront();
            }
        });

        getRootPane().setDefaultButton(jButton2);
        Util.decorate(this, true);
    }

    private void enableButtons(boolean enable) {
        jButton1.setEnabled(enable);
        jButton3.setEnabled(enable);
    }

    @Override
    public void setTitle(String title) {
        super.setTitle(title);
        titleLabel.setText(title);
    }

    public void setWorkItem(WorkitemType wi) {
        workItem = wi;
        enableButtons(true);
        setTitle(wi.getTitle());
    }
    
    public WorkitemType getWorkItem() {
        return workItem;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        headerPanel1 = new javax.swing.JPanel();
        timeLabel = new javax.swing.JLabel();
        headerLogoLabel = new javax.swing.JLabel();
        alwaysOnTopButton = new javax.swing.JToggleButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(org.flowkeeper.client.ui.PomodoroClientApp.class).getContext().getResourceMap(TimerWindow.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        titleLabel.setFont(titleLabel.getFont());
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        titleLabel.setText(resourceMap.getString("titleLabel.text")); // NOI18N
        titleLabel.setName("titleLabel"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(org.flowkeeper.client.ui.PomodoroClientApp.class).getContext().getActionMap(TimerWindow.class, this);
        jButton1.setAction(actionMap.get("voidPomodoro")); // NOI18N
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N

        jButton2.setAction(actionMap.get("hideWindow")); // NOI18N
        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N

        jButton3.setAction(actionMap.get("interruption")); // NOI18N
        jButton3.setText(resourceMap.getString("jButton3.text")); // NOI18N
        jButton3.setName("jButton3"); // NOI18N

        headerPanel1.setBackground(resourceMap.getColor("headerPanel1.background")); // NOI18N
        headerPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(resourceMap.getColor("headerPanel1.border.lineColor"))); // NOI18N
        headerPanel1.setName("headerPanel1"); // NOI18N

        timeLabel.setFont(timeLabel.getFont().deriveFont(timeLabel.getFont().getSize()+7f));
        timeLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        timeLabel.setText(resourceMap.getString("timeLabel.text")); // NOI18N
        timeLabel.setName("timeLabel"); // NOI18N

        headerLogoLabel.setIcon(resourceMap.getIcon("headerLogoLabel.icon")); // NOI18N
        headerLogoLabel.setName("headerLogoLabel"); // NOI18N

        javax.swing.GroupLayout headerPanel1Layout = new javax.swing.GroupLayout(headerPanel1);
        headerPanel1.setLayout(headerPanel1Layout);
        headerPanel1Layout.setHorizontalGroup(
            headerPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headerPanel1Layout.createSequentialGroup()
                .addContainerGap(145, Short.MAX_VALUE)
                .addComponent(headerLogoLabel))
            .addGroup(headerPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(headerPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(timeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)))
        );
        headerPanel1Layout.setVerticalGroup(
            headerPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(headerLogoLabel)
            .addGroup(headerPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(timeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE))
        );

        alwaysOnTopButton.setAction(actionMap.get("toggleAlwaysOnTop")); // NOI18N
        alwaysOnTopButton.setIcon(resourceMap.getIcon("alwaysOnTopButton.icon")); // NOI18N
        alwaysOnTopButton.setText(resourceMap.getString("alwaysOnTopButton.text")); // NOI18N
        alwaysOnTopButton.setName("alwaysOnTopButton"); // NOI18N

        jButton4.setAction(actionMap.get("nextPomodoro")); // NOI18N
        jButton4.setText(resourceMap.getString("jButton4.text")); // NOI18N
        jButton4.setName("jButton4"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(alwaysOnTopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(headerPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headerPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(titleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(alwaysOnTopButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @Action
    public void voidPomodoro() {
        if (JOptionPane.showConfirmDialog(this, "Are you sure you want to void this pomodoro?", "Confirm", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            for (PomodoroListener l: listeners) {
                l.pomodoroVoid(workItem);
            }
            hideWindow();
        }
    }

    public void enableNextButton(boolean enable) {
        jButton4.setEnabled(enable);
    }

    private LinkedList<PomodoroListener> listeners = new LinkedList<PomodoroListener> ();
    
    public void addPomodoroListener(PomodoroListener l) {
        listeners.add(l);
    }

    public void removePomodoroListener(PomodoroListener l) {
        listeners.remove(l);
    }

    @Action
    public void hideWindow() {
        setVisible(false);
    }

    @Action
    public void interruption() {
        InterruptionDialog dlg = new InterruptionDialog(null, true);
        long started = new Date().getTime();
        dlg.setVisible(true);
        if (dlg.isCreated()) {
            long len = (new Date().getTime() - started) / 1000;
            InterruptionType interruption = new InterruptionType();
            interruption.setComment(dlg.getComment());
            interruption.setDuration((int)len);
            // TODO: Specify start
            //interruption.setStart(XMLGregorianCalendarImpl.);
            for (PomodoroListener l: listeners) {
                l.interruption(workItem, interruption);
            }
        }
    }

    @Action
    public void toggleAlwaysOnTop() {
        prefs.put("timerAlwaysOnTop", alwaysOnTopButton.isSelected() ? "Y" : "N");
        setAlwaysOnTop(alwaysOnTopButton.isSelected());
    }

    @Action
    public void nextPomodoro() {
        try {
            mainWindow.startPomodoro();
        } catch (NotFoundException ex) {
            Logger.getLogger(TraySupport.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoPomodorosLeftException ex) {
            Logger.getLogger(TraySupport.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton alwaysOnTopButton;
    private javax.swing.JLabel headerLogoLabel;
    private javax.swing.JPanel headerPanel1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables

}
