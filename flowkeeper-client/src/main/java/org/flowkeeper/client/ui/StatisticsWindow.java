package org.flowkeeper.client.ui;

import org.flowkeeper.server.PlanType;
import org.flowkeeper.server.PomodoroType;
import org.flowkeeper.server.StatusType;
import org.flowkeeper.server.WorkitemType;
import org.jdesktop.application.Action;

/**
 *
 * 
 */
public class StatisticsWindow extends javax.swing.JDialog {
    /**
	 * 
	 */
	private static final long serialVersionUID = -3662772913124759814L;
	private final PlanType plan;

    /** Creates new form StatisticsWindow */
    public StatisticsWindow(java.awt.Frame parent, boolean modal, PlanType plan) {
        super(parent, modal);
        this.plan = plan;
        initComponents();
        calculateStatistics();
        getRootPane().setDefaultButton(closeButton);
        Util.decorate(this, true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        statisticsText = new javax.swing.JTextArea();
        headerPanel1 = new javax.swing.JPanel();
        headerTextLabel1 = new javax.swing.JLabel();
        headerLogoLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(org.flowkeeper.client.ui.PomodoroClientApp.class).getContext().getResourceMap(StatisticsWindow.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(org.flowkeeper.client.ui.PomodoroClientApp.class).getContext().getActionMap(StatisticsWindow.class, this);
        closeButton.setAction(actionMap.get("close")); // NOI18N
        closeButton.setText(resourceMap.getString("closeButton.text")); // NOI18N
        closeButton.setName("closeButton"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        statisticsText.setColumns(20);
        statisticsText.setEditable(false);
        statisticsText.setRows(5);
        statisticsText.setName("statisticsText"); // NOI18N
        jScrollPane1.setViewportView(statisticsText);

        headerPanel1.setBackground(resourceMap.getColor("headerPanel1.background")); // NOI18N
        headerPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(resourceMap.getColor("headerPanel1.border.lineColor"))); // NOI18N
        headerPanel1.setName("headerPanel1"); // NOI18N

        headerTextLabel1.setFont(headerTextLabel1.getFont().deriveFont(headerTextLabel1.getFont().getSize()+7f));
        headerTextLabel1.setText(resourceMap.getString("headerTextLabel1.text")); // NOI18N
        headerTextLabel1.setName("headerTextLabel1"); // NOI18N

        headerLogoLabel.setIcon(resourceMap.getIcon("headerLogoLabel.icon")); // NOI18N
        headerLogoLabel.setName("headerLogoLabel"); // NOI18N

        javax.swing.GroupLayout headerPanel1Layout = new javax.swing.GroupLayout(headerPanel1);
        headerPanel1.setLayout(headerPanel1Layout);
        headerPanel1Layout.setHorizontalGroup(
            headerPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headerPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headerTextLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(headerLogoLabel))
        );
        headerPanel1Layout.setVerticalGroup(
            headerPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(headerLogoLabel)
            .addComponent(headerTextLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 369, Short.MAX_VALUE)
                    .addComponent(closeButton, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(headerPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headerPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(closeButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                StatisticsWindow dialog = new StatisticsWindow(new javax.swing.JFrame(), true, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    @Action
    public void close() {
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel headerLogoLabel;
    private javax.swing.JPanel headerPanel1;
    private javax.swing.JLabel headerTextLabel1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea statisticsText;
    // End of variables declaration//GEN-END:variables

    private void calculateStatistics() {
        if (plan.getWorkitem().isEmpty()) {
            statisticsText.setText("The plan is empty - nothing to analyze.");
            return;
        }
        int allWi = 0;
        int plannedWi = 0;
        int completedWi = 0;
        int allPom = 0;
        int plannedPom = 0;
        int completedPom = 0;
        int failedPom = 0;
        int allInter = 0;
        for (WorkitemType w: plan.getWorkitem()) {
            ++allWi;
            if (w.getSection().equalsIgnoreCase("planned")) {
                ++plannedWi;
            }
            if (w.getStatus().equals(StatusType.COMPLETED)) {
                ++completedWi;
            }
            for (PomodoroType p: w.getPomodoro()) {
                ++allPom;
                if (p.isPlanned()) {
                    ++plannedPom;
                }
                if (p.getStatus().equals(StatusType.COMPLETED)) {
                    ++completedPom;
                } else if (p.getStatus().equals(StatusType.FAILED)) {
                    ++failedPom;
                }
                allInter += p.getInterruption().size();
            }
        }
        // TODO: Analyze rythm
        statisticsText.setText(
                "Work items\n" +
                " * Total: " + allWi + "\n" +
                " * Planned: " + plannedWi + " (" + (100 * plannedWi / allWi) + "%)\n" +
                " * Unplanned: " + (allWi - plannedWi) + " (" + (100 * (allWi - plannedWi) / allWi) + "%)\n" +
                " * Completed: " + (completedWi) + " (" + (100 * completedWi / allWi) + "%)\n" +
                " * Incomplete: " + (allWi - completedWi) + " (" + (100 * (allWi - completedWi) / allWi) + "%)\n" +
                " * Average Pomodoros: " + (allPom / allWi)+ "\n" +
                "\n" +
                "Pomodoros\n" +
                " * Total: " + allPom + "\n" +
                " * Planned: " + plannedPom + " (" + (100 * plannedPom / allPom) + "%)\n" +
                " * Unplanned: " + (allPom - plannedPom) + " (" + (100 * (allPom - plannedPom) / allPom) + "%)\n" +
                " * Completed: " + (completedPom) + " (" + (100 * completedPom / allPom) + "%)\n" +
                " * Failed: " + (failedPom) + " (" + (100 * (failedPom) / allPom) + "%)\n" +
                " * Others: " + (allPom - completedPom - failedPom) + " (" + (100 * (allPom - completedPom - failedPom) / allPom) + "%)\n" +
                " * Average Interruptions: " + (allInter / allPom)+ "\n" +
                "\n" +
                "Interruptions\n" +
                " * Total: " + allInter + "\n"
            );
    }

}
