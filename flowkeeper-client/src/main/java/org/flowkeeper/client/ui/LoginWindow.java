package org.flowkeeper.client.ui;

import java.io.IOException;
import java.util.prefs.Preferences;

import javax.swing.JOptionPane;

import org.flowkeeper.server.api.LoginException;
import org.flowkeeper.server.api.OfflineServerImpl;
import org.flowkeeper.server.api.RestfulServerImpl;
import org.flowkeeper.server.api.Server;
import org.jdesktop.application.Action;
import org.jdesktop.beansbinding.AutoBinding;

/**
 *
 * @author  Constantine
 */
public class LoginWindow extends javax.swing.JDialog {

    /**
	 * 
	 */
	private static final long serialVersionUID = 8668753513186023563L;
	private Server server = null;
    private final Preferences prefs = Preferences.userRoot().node("pomodoroServer");
    private boolean success = false;
    
    public boolean isSuccess() {
        return success;
    }

    /** Creates new form LoginWindow */
    public LoginWindow(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        loadPreferences();
        getRootPane().setDefaultButton(loginButton);
        Util.decorate(this, true);
    }

    public Server getServer() {
       return server;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        modeButtonGroup = new javax.swing.ButtonGroup();
        userNameLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        serverAddressLabel = new javax.swing.JLabel();
        serverAddressField = new javax.swing.JTextField();
        userNameField = new javax.swing.JTextField();
        passwordField = new javax.swing.JPasswordField();
        loginButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        offlineRadio = new javax.swing.JRadioButton();
        loginRadio = new javax.swing.JRadioButton();
        storePasswordCheckBox = new javax.swing.JCheckBox();
        logoLabel = new javax.swing.JLabel();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(org.flowkeeper.client.ui.PomodoroClientApp.class).getContext().getResourceMap(LoginWindow.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setModal(true);
        setName("Form"); // NOI18N
        setResizable(false);

        userNameLabel.setText(resourceMap.getString("userNameLabel.text")); // NOI18N
        userNameLabel.setName("userNameLabel"); // NOI18N

        passwordLabel.setText(resourceMap.getString("passwordLabel.text")); // NOI18N
        passwordLabel.setName("passwordLabel"); // NOI18N

        serverAddressLabel.setText(resourceMap.getString("serverAddressLabel.text")); // NOI18N
        serverAddressLabel.setName("serverAddressLabel"); // NOI18N

        serverAddressField.setText(resourceMap.getString("serverAddressField.text")); // NOI18N
        serverAddressField.setName("serverAddressField"); // NOI18N

        AutoBinding<Object, Object, Object, Object> binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, loginButton, org.jdesktop.beansbinding.ELProperty.create("${action}"), serverAddressField, org.jdesktop.beansbinding.BeanProperty.create("action"));
        bindingGroup.addBinding(binding);

        userNameField.setText(resourceMap.getString("userNameField.text")); // NOI18N
        userNameField.setName("userNameField"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, loginButton, org.jdesktop.beansbinding.ELProperty.create("${action}"), userNameField, org.jdesktop.beansbinding.BeanProperty.create("action"));
        bindingGroup.addBinding(binding);

        passwordField.setText(resourceMap.getString("passwordField.text")); // NOI18N
        passwordField.setName("passwordField"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, loginButton, org.jdesktop.beansbinding.ELProperty.create("${action}"), passwordField, org.jdesktop.beansbinding.BeanProperty.create("action"));
        bindingGroup.addBinding(binding);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(org.flowkeeper.client.ui.PomodoroClientApp.class).getContext().getActionMap(LoginWindow.class, this);
        loginButton.setAction(actionMap.get("login")); // NOI18N
        loginButton.setText(resourceMap.getString("loginButton.text")); // NOI18N
        loginButton.setName("loginButton"); // NOI18N

        exitButton.setAction(actionMap.get("quit")); // NOI18N
        exitButton.setText(resourceMap.getString("exitButton.text")); // NOI18N
        exitButton.setName("exitButton"); // NOI18N

        offlineRadio.setAction(actionMap.get("modeChanged")); // NOI18N
        modeButtonGroup.add(offlineRadio);
        offlineRadio.setText(resourceMap.getString("offlineRadio.text")); // NOI18N
        offlineRadio.setName("offlineRadio"); // NOI18N

        loginRadio.setAction(actionMap.get("modeChanged")); // NOI18N
        modeButtonGroup.add(loginRadio);
        loginRadio.setText(resourceMap.getString("loginRadio.text")); // NOI18N
        loginRadio.setName("loginRadio"); // NOI18N

        storePasswordCheckBox.setText(resourceMap.getString("storePasswordCheckBox.text")); // NOI18N
        storePasswordCheckBox.setName("storePasswordCheckBox"); // NOI18N

        logoLabel.setIcon(resourceMap.getIcon("logoLabel.icon")); // NOI18N
        logoLabel.setText(resourceMap.getString("logoLabel.text")); // NOI18N
        logoLabel.setBorder(javax.swing.BorderFactory.createLineBorder(resourceMap.getColor("logoLabel.border.lineColor"))); // NOI18N
        logoLabel.setName("logoLabel"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(loginButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exitButton)
                .addContainerGap(179, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(offlineRadio)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(userNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passwordLabel)
                            .addComponent(serverAddressLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(passwordField)
                            .addComponent(userNameField)
                            .addComponent(storePasswordCheckBox)
                            .addComponent(serverAddressField, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(loginRadio))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(logoLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(logoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(offlineRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loginRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serverAddressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(serverAddressLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(userNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(storePasswordCheckBox)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginButton)
                    .addComponent(exitButton))
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void storePreferences() {
        prefs.put("mode", offlineRadio.isSelected() ? "O" : "S");
        prefs.put("username", userNameField.getText());
        prefs.put("serverAddress", serverAddressField.getText());
        boolean storePassword = storePasswordCheckBox.isSelected();
        prefs.put("storePassword", storePassword ? "Y" : "N");
        if (storePassword) {
            prefs.put("password", new String(passwordField.getPassword()));
        } else {
            prefs.put("password", "");
        }
    }
    
    private void loadPreferences() {
        boolean offlineMode = prefs.get("mode", "O").equals("O");
        modeButtonGroup.setSelected(offlineRadio.getModel(), offlineMode);
        modeButtonGroup.setSelected(loginRadio.getModel(), !offlineMode);
        serverAddressField.setText(prefs.get("serverAddress", ""));
        userNameField.setText(prefs.get("username", ""));
        passwordField.setText(prefs.get("password", ""));
        storePasswordCheckBox.setSelected(prefs.get("storePassword", "N").equals("Y"));
        enableControls();
        loginButton.requestFocus();
    }

    private void enableControls() {
        boolean onlineMode = loginRadio.isSelected();
        serverAddressField.setEnabled(onlineMode);
        userNameField.setEnabled(onlineMode);
        passwordField.setEnabled(onlineMode);
        storePasswordCheckBox.setEnabled(onlineMode);
    }

    @Action
    public void login() {
        try {
            server = offlineRadio.isSelected() ?
                new OfflineServerImpl() :
                new RestfulServerImpl(userNameField.getText(), new String(passwordField.getPassword()));

            storePreferences();
            success = true;
            this.setVisible(false);
        } catch (LoginException t) {
            JOptionPane.showMessageDialog(this, "You specified invalid credentials", "Unable to log in", JOptionPane.WARNING_MESSAGE);
            t.printStackTrace();
        } catch (IOException t) {
            JOptionPane.showMessageDialog(this, "Communication error occured. Please try again later.", "Unable to log in", JOptionPane.ERROR_MESSAGE);
            t.printStackTrace();
        }
    }

    @Action
    public void modeChanged() {
        enableControls();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exitButton;
    private javax.swing.JButton loginButton;
    private javax.swing.JRadioButton loginRadio;
    private javax.swing.JLabel logoLabel;
    private javax.swing.ButtonGroup modeButtonGroup;
    private javax.swing.JRadioButton offlineRadio;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JTextField serverAddressField;
    private javax.swing.JLabel serverAddressLabel;
    private javax.swing.JCheckBox storePasswordCheckBox;
    private javax.swing.JTextField userNameField;
    private javax.swing.JLabel userNameLabel;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

}
